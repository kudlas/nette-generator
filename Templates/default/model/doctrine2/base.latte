{syntax double}{{$phpTag|noescape}} namespace App{{$moduleName}}\Models;
/** This BaseRepository was automatically generated by Nette generator. */
class BaseRepository extends \Nette\Object {
	/** @var \Kdyby\Doctrine\EntityManager */
	protected $entityManager;
	/** @var \Kdyby\Doctrine\EntityDao */
	protected $dataAccessObject;
	/** @var string */
	protected $className, $fullClassName;

	public function __construct(\Kdyby\Doctrine\EntityManager $entityManager) {
		$this->entityManager = $entityManager;
	}

	public function setTable($table) {
		$this->className = implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $table)));
		$this->fullClassName = "\Kdyby\Doctrine\\$this->className";
		$this->dataAccessObject = $this->entityManager->getDao("\Kdyby\Doctrine\\$this->className");
	}
	
	public function getAll(array $where, array $order, array $limit) {
		$table = $this->dataAccessObject->createQueryBuilder()->select($this->className)->from($this->fullClassName, $this->className);
		$i = 0;
		if (!empty($where)) foreach ($where as $w) if ($w['val'] !== '') {
			if (count($joinTable = explode('.', $w['col'])) === 2) {
				$column = $joinTable[1];
				$table->leftJoin("$this->className.$joinTable[0]", $joinTable = (implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $joinTable[0])))));
				switch ($w['mod']) {
					case 'BETWEEN': $table->where($table->expr()->between("$joinTable.$column", explode(' ', $w['val'])[0], explode(' ', $w['val'])[1])); break;
					case 'LIKE': $table->where($table->expr()->like("$joinTable.$column", "?$i"))->setParameter($i++, "%{$w['val']}%"); break;
					case 'IN': $table->where($table->expr()->in("$joinTable.$column",  explode(';', $w['val']))); break;
					case 'NOT IN': $table->where($table->expr()->notIn("$joinTable.$column",  explode(';', $w['val']))); break;
					case 'IS NULL': $table->where($table->expr()->isNull("$joinTable.$column")); break;
					case 'IS NOT NULL': $table->where($table->expr()->isNotNull("$joinTable.$column")); break;
					default: $table->where("$joinTable.$column {$w['mod']} ?$i")->setParameter($i++, $w['val']); break;
				}
			} else {
					switch ($w['mod']) {
					case 'BETWEEN': $table->where($table->expr()->between("$this->className.{$w['col']}", explode(' ', $w['val'])[0], explode(' ', $w['val'])[1])); break;
					case 'LIKE': $table->where($table->expr()->like("$this->className.{$w['col']}", "?$i"))->setParameter($i++, "%{$w['val']}%"); break;
					case 'IN': $table->where($table->expr()->in("$this->className.{$w['col']}",  explode(';', $w['val']))); break;
					case 'NOT IN': $table->where($table->expr()->notIn("$this->className.{$w['col']}",  explode(';', $w['val']))); break;
					case 'IS NULL': $table->where($table->expr()->isNull("$this->className.{$w['col']}")); break;
					case 'IS NOT NULL': $table->where($table->expr()->isNotNull("$this->className.{$w['col']}")); break;
					default: $table->where("$this->className.{$w['col']} {$w['mod']} ?$i")->setParameter($i++, $w['val']); break;
				}
			}
		}
		if (!empty($order)) foreach ($order as $o) $table->orderBy($o['col'] . ' ' . $o['mod']);
		if (!empty($limit)) $table->setMaxResults($limit['lim'])->setFirstResult($limit['off']);
		return $table->getQuery()->getResult();
	}

	public function getPages(array $where, array $limit) {
		$table = $this->dataAccessObject->createQueryBuilder()->select("COUNT($this->className)")->from($this->fullClassName, $this->className);
		$i = 0;
		if (!empty($where)) foreach ($where as $w) if ($w['val'] !== '') {
			if (count($joinTable = explode('.', $w['col'])) === 2) {
				$column = $joinTable[1];
				$table->leftJoin("$this->className.$joinTable[0]", $joinTable = (implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $joinTable[0])))));
				switch ($w['mod']) {
					case 'BETWEEN': $table->where($table->expr()->between("$joinTable.$column", explode(' ', $w['val'])[0], explode(' ', $w['val'])[1])); break;
					case 'LIKE': $table->where($table->expr()->like("$joinTable.$column", "?$i"))->setParameter($i++, "%{$w['val']}%"); break;
					case 'IN': $table->where($table->expr()->in("$joinTable.$column",  explode(';', $w['val']))); break;
					case 'NOT IN': $table->where($table->expr()->notIn("$joinTable.$column",  explode(';', $w['val']))); break;
					case 'IS NULL': $table->where($table->expr()->isNull("$joinTable.$column")); break;
					case 'IS NOT NULL': $table->where($table->expr()->isNotNull("$joinTable.$column")); break;
					default: $table->where("$joinTable.$column {$w['mod']} ?$i")->setParameter($i++, $w['val']); break;
				}
			} else {
					switch ($w['mod']) {
					case 'BETWEEN': $table->where($table->expr()->between("$this->className.{$w['col']}", explode(' ', $w['val'])[0], explode(' ', $w['val'])[1])); break;
					case 'LIKE': $table->where($table->expr()->like("$this->className.{$w['col']}", "?$i"))->setParameter($i++, "%{$w['val']}%"); break;
					case 'IN': $table->where($table->expr()->in("$this->className.{$w['col']}",  explode(';', $w['val']))); break;
					case 'NOT IN': $table->where($table->expr()->notIn("$this->className.{$w['col']}",  explode(';', $w['val']))); break;
					case 'IS NULL': $table->where($table->expr()->isNull("$this->className.{$w['col']}")); break;
					case 'IS NOT NULL': $table->where($table->expr()->isNotNull("$this->className.{$w['col']}")); break;
					default: $table->where("$this->className.{$w['col']} {$w['mod']} ?$i")->setParameter($i++, $w['val']); break;
				}
			}
		}
		return ceil($table->getQuery()->getSingleScalarResult() / (int)$limit['lim']);
	}

	public function get($primaryKey) {
		$indexes = [];
		foreach ($this->entityManager->getClassMetadata($this->fullClassName)->table['indexes'] as $m) $indexes[] = $m['columns'][0];
		$row = $this->objectToArray($this->dataAccessObject->find($primaryKey));
		foreach ($row as $key => $value) {
			if ($value instanceof \DateTime) {
				$row[$key] = $value->format('c');
				continue;
			}
			if (is_object($value)) {
				$getters = $setters = NULL;
				foreach (get_class_methods(get_class($value)) as $method) {
					if(mb_strpos($method, 'get') === 0 && $method !== 'getReflection') $getters[] = str_replace('get', '', $method);
					if(mb_strpos($method, 'set') === 0) $setters[] = str_replace('set', '', $method);
				}
				$column = array_slice(array_filter($indexes, function($value) use ($key) { return mb_strpos($value, $key) !== FALSE; }), 0, 1)[0];
				$newKey = 'get' . array_values(array_diff($getters, $setters))[0];
				$row[$column] = $value->$newKey();
			}
		}
		return $row;
	}

	private function objectToArray($object) {
		$array = [];
		foreach (get_class_methods(get_class($object)) as $method) {
			if (mb_strpos($method, 'get') !== FALSE && $method !== '__get' && $method !== 'getReflection') {
				$property = lcfirst(substr($method, 3));
				$array[$property] = $object->$property;
			}
		}	
		return $array;
	}

	public function save($primaryKey, array $values) {
		$classMetadata = $this->entityManager->getClassMetadata($this->fullClassName);
		$indexes = [];
		foreach ($classMetadata->table['indexes'] as $m) $indexes[] = $m['columns'][0];	
		$entity = ($primaryKey = $primaryKey ?: FALSE) ? $this->dataAccessObject->find($primaryKey) : new $this->fullClassName();
		foreach ($values as $key => $value) {
			if ($value === '') continue;
			$column = array_slice(array_filter($indexes, function($value) use ($key) { return mb_strpos($value, $key) !== FALSE; }), 0, 1);
			if (!empty($column)) {
				$key = str_replace('_id', '', $key);
				$keyEntity = '\Kdyby\Doctrine\\' . implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $key)));
				$dao = $this->entityManager->getDao($keyEntity);
				$entity->$key = $dao->find($value);
			} else {
				if (in_array($classMetadata->getTypeOfField($key), ['datetime', 'timesptamp'])) $values = new \DateTime($values);
				$newKey = 'set' . ucfirst($key);
				$entity->$newKey($value);
			}
		}
		try {
			$this->dataAccessObject->save($entity);
		} catch(\Kdyby\Doctrine\DuplicateEntryException $e) {
			$pdo = new \PDOException($e->getPrevious()->getPrevious()->getMessage(), $e->getPrevious()->getPrevious()->getCode());
			$pdo->errorInfo = $e->getPrevious()->getPrevious()->errorInfo;
			throw $pdo;
		}
		return $entity;
	}

	public function remove($primaryKey) {
		try {
			$this->dataAccessObject->delete($this->dataAccessObject->find($primaryKey));
		} catch (\Kdyby\Doctrine\DBALException $e) {
			$pdo = new \PDOException($e->getPrevious()->getPrevious()->getMessage(), $e->getPrevious()->getPrevious()->getCode());
			$pdo->errorInfo = $e->getPrevious()->getPrevious()->errorInfo;
			throw $pdo;
		}
	}
}