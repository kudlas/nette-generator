{syntax double}{{$phpTag|noescape}} namespace App{{$moduleName}}\Models;
/** This BaseRepository was automatically generated by Nette generator. */
class BaseRepository extends \Nette\Object {
	/** @var \Nette\Database\Context */
	protected $database;
	/** @var string */
	protected $table;

	public function __construct(\Nette\Database\Context $database) {
		$this->database = $database;
	}
	
	public function setTable($table) {
		$this->table = $table;
	}

	/**
	 * Return table rows
	 * @param array $where
	 * @param array $order
	 * @param array $limit
	 * @return \Nette\Database\Table\Selection
	 */
	public function getAll(array $where, array $order, array $limit) {
		$table = $this->database->table($this->table);
		if (!empty($where)) foreach ($where as $w) if ($w['val'] !== '') {
			switch ($w['mod']) {
				case 'BETWEEN': $table->where($w['col'] . ' BETWEEN ' . explode(' ', $w['val'])[0] . ' AND ' . explode(' ', $w['val'])[1]); break;
				case 'LIKE': $table->where($w['col'] . ' LIKE ?', '%' . $w['val'] . '%'); break;
				case 'IN': $table->where($w['col'] . ' IN ?', explode(';', $w['val'])); break;
				case 'NOT IN': $table->where($w['col'] . ' NOT IN ?', explode(';', $w['val'])); break;
				case 'IS NULL': $table->where($w['col'] . ' IS NULL'); break;
				case 'IS NOT NULL': $table->where($w['col'] . ' IS NOT NULL'); break;
				default: $table->where($w['col'] . ' ' . $w['mod'] . ' ?', $w['val']); break;
			}
		}
		if (!empty($order)) foreach ($order as $o) $table->order($o['col'] . ' ' . $o['mod']);
		if (!empty($limit)) $table->limit($limit['lim'], $limit['off']);
		return $table;
	}

	/**
	 * Return count of pages needed for show table rows
	 * @param array $where
	 * @param array $limit
	 * @return integer
	 */
	public function getPages(array $where, array $limit) {
		$table = $this->database->table($this->table)->select('CEIL(COUNT(*) / ?) count', (int)$limit['lim']);
		if (!empty($where)) foreach ($where as $w) if ($w['val'] !== '') {
			switch ($w['mod']) {
				case 'BETWEEN': $table->where($w['col'] . ' BETWEEN ' . explode(' ', $w['val'])[0] . ' AND ' . explode(' ', $w['val'])[1]); break;
				case 'LIKE': $table->where($w['col'] . ' LIKE ?', '%' . $w['val'] . '%'); break;
				case 'IN': $table->where($w['col'] . ' IN ?', explode(';', $w['val'])); break;
				case 'NOT IN': $table->where($w['col'] . ' NOT IN ?', explode(';', $w['val'])); break;
				case 'IS NULL': $table->where($w['col'] . ' IS NULL'); break;
				case 'IS NOT NULL': $table->where($w['col'] . ' IS NOT NULL'); break;
				default: $table->where($w['col'] . ' ' . $w['mod'] . ' ?', $w['val']); break;
			}
		}	
		return (int)$table->fetch()->count;
	}

	/**
	 * Return table row
	 * @param string $primaryKey
	 * @return \Nette\Database\Table\ActiveRow
	 */
	public function get($primaryKey) {
		return $this->database->table($this->table)->get($primaryKey);
	}

	/**
	 * Save table row
	 * @param type $primaryKey
	 * @param type $values
	 * @return \Nette\Database\Table\ActiveRow|boolean
	 */
	public function save($primaryKey, array $values) {
		$table = $this->database->table($this->table);
		foreach ($values as $key => $value) if (empty($value)) unset($values[$key]);
		return ($primaryKey = $primaryKey ?: FALSE) ? (($row = $this->get($primaryKey)) ? $row->update($values) : FALSE) : $table->insert($values);
	}

	/**
	 * Remove table row
	 * @param string $primaryKey
	 * @return boolean
	 */
	public function remove($primaryKey) {
		return (bool)(($row = $this->get($primaryKey)) ? $row->delete() : FALSE);
	}
}